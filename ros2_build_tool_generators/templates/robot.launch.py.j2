#!/usr/bin/env python3
"""
Main launch file for {{ profile.name }}
Generated by ROS2 Build Tool with {{ 'lifecycle' if use_lifecycle else 'standard' }} node management
"""

from launch import LaunchDescription
from launch.actions import (
    DeclareLaunchArgument,
    IncludeLaunchDescription,
    RegisterEventHandler,
    LogInfo,
    TimerAction
)
from launch.conditions import IfCondition, UnlessCondition
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node{% if use_lifecycle %}, LifecycleNode{% endif %}{% if use_composable %}, ComposableNodeContainer, LoadComposableNodes{% endif %}
from launch_ros.substitutions import FindPackageShare
{% if use_composable %}
from launch_ros.descriptions import ComposableNode
{% endif %}
{% if use_lifecycle %}
from launch_ros.event_handlers import OnStateTransition
from launch_ros.events.lifecycle import ChangeState
from lifecycle_msgs.msg import Transition
{% endif %}
import os


def generate_launch_description():
    """Generate launch description with all system components"""

    # Declare launch arguments
    use_sim_time_arg = DeclareLaunchArgument(
        'use_sim_time',
        default_value='false',
        description='Use simulation time'
    )

    rviz_arg = DeclareLaunchArgument(
        'rviz',
        default_value='{{ "true" if profile.rviz else "false" }}',
        description='Launch RViz'
    )

    foxglove_arg = DeclareLaunchArgument(
        'foxglove',
        default_value='{{ "true" if profile.foxglove else "false" }}',
        description='Launch Foxglove bridge'
    )

    # Get launch configurations
    use_sim_time = LaunchConfiguration('use_sim_time')
    launch_rviz = LaunchConfiguration('rviz')
    launch_foxglove = LaunchConfiguration('foxglove')

    # Package share directories
    pkg_share = FindPackageShare('{{ profile.name }}_bringup')

    # Include sensor drivers launch
    sensors_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'sensors.launch.py'])
        ]),
        launch_arguments={
            'use_sim_time': use_sim_time,
        }.items()
    )

    # Robot state publisher (must start first)
    robot_description_path = PathJoinSubstitution([
        pkg_share, 'urdf', 'robot.urdf'
    ])

    with open(str(robot_description_path), 'r') as f:
        robot_description = f.read()

    robot_state_publisher = {{ 'LifecycleNode' if use_lifecycle else 'Node' }}(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        name='robot_state_publisher',
        output='screen',
        parameters=[{
            'robot_description': robot_description,
            'use_sim_time': use_sim_time,
        }],
{% if use_lifecycle %}
        # Lifecycle configuration
        namespace='',
        respawn=False,  # Lifecycle nodes use lifecycle management instead
{% else %}
        respawn=True,
        respawn_delay=2.0,
        respawn_max_count=5,
{% endif %}
    )

{% if use_lifecycle %}
    # Lifecycle event handlers for robot_state_publisher
    rsp_configure_event = RegisterEventHandler(
        OnStateTransition(
            target_lifecycle_node=robot_state_publisher,
            start_state='configuring',
            goal_state='inactive',
            entities=[
                LogInfo(msg='Robot state publisher configured, activating...'),
                ChangeState(
                    lifecycle_node_matcher=lambda node: node == robot_state_publisher,
                    transition_id=Transition.TRANSITION_ACTIVATE
                )
            ]
        )
    )

    rsp_activate_event = RegisterEventHandler(
        OnStateTransition(
            target_lifecycle_node=robot_state_publisher,
            start_state='activating',
            goal_state='active',
            entities=[
                LogInfo(msg='Robot state publisher active, starting sensors...'),
                TimerAction(
                    period=2.0,
                    actions=[sensors_launch]
                )
            ]
        )
    )

    # Trigger initial configuration
    configure_rsp = TimerAction(
        period=0.5,
        actions=[
            ChangeState(
                lifecycle_node_matcher=lambda node: node == robot_state_publisher,
                transition_id=Transition.TRANSITION_CONFIGURE
            )
        ]
    )
{% endif %}

{% if profile.slam_type.value != 'none' %}
    # SLAM launch
    slam_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'slam.launch.py'])
        ]),
        launch_arguments={
            'use_sim_time': use_sim_time,
            'slam_type': '{{ profile.slam_type.value }}',
        }.items()
    )
{% endif %}

{% if profile.navigation %}
    # Navigation launch
    nav2_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'navigation.launch.py'])
        ]),
        launch_arguments={
            'use_sim_time': use_sim_time,
        }.items()
    )
{% endif %}

{% if profile.rviz %}
    # RViz
    rviz_config = PathJoinSubstitution([pkg_share, 'rviz', 'robot.rviz'])
    rviz_node = Node(
        package='rviz2',
        executable='rviz2',
        name='rviz2',
        arguments=['-d', rviz_config],
        condition=IfCondition(launch_rviz),
        parameters=[{'use_sim_time': use_sim_time}]
    )
{% endif %}

{% if profile.foxglove %}
    # Foxglove bridge
    foxglove_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'foxglove.launch.py'])
        ]),
        condition=IfCondition(launch_foxglove)
    )
{% endif %}

{% if profile.self_healing %}
    # Self-healing watchdog
    watchdog_node = Node(
        package='ros2_build_tool_watchdog',
        executable='topic_watchdog',
        name='topic_watchdog',
        output='screen',
        parameters=[{
            'monitored_topics': ['/scan', '/odom', '/imu'],
            'timeout_seconds': 5.0,
            'check_rate_hz': 1.0,
            'enable_recovery': True,
        }]
    )
{% endif %}

{% if use_composable %}
    # Composable node container for performance optimization
    composable_container = ComposableNodeContainer(
        name='sensor_container',
        namespace='',
        package='rclcpp_components',
        executable='component_container',
        composable_node_descriptions=[
            # Add sensor components here dynamically
            # ComposableNode(
            #     package='package_name',
            #     plugin='plugin_class',
            #     name='node_name',
            # ),
        ],
        output='screen',
    )
{% endif %}

    # Build launch description
    ld = LaunchDescription([
        # Arguments
        use_sim_time_arg,
        rviz_arg,
        foxglove_arg,

        # Core nodes
        robot_state_publisher,
{% if use_lifecycle %}
        # Lifecycle event handlers
        rsp_configure_event,
        rsp_activate_event,
        configure_rsp,
{% else %}
        # Sensors
        sensors_launch,
{% endif %}
{% if profile.slam_type.value != 'none' %}
        slam_launch,
{% endif %}
{% if profile.navigation %}
        nav2_launch,
{% endif %}
{% if profile.rviz %}
        rviz_node,
{% endif %}
{% if profile.foxglove %}
        foxglove_launch,
{% endif %}
{% if profile.self_healing %}
        watchdog_node,
{% endif %}
{% if use_composable %}
        composable_container,
{% endif %}
    ])

    return ld