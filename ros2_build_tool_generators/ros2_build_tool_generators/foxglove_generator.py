"""
Foxglove bridge integration generator
"""

import logging
from pathlib import Path
from typing import Optional


class FoxgloveGenerator:
    """
    Generate Foxglove bridge launch files and configuration
    """

    def __init__(self, package_path: Path, logger: Optional[logging.Logger] = None):
        self.package_path = package_path
        self.launch_dir = package_path / 'launch'
        self.config_dir = package_path / 'config'
        self.logger = logger or logging.getLogger(__name__)

        self.launch_dir.mkdir(exist_ok=True)
        self.config_dir.mkdir(exist_ok=True)

    def generate_foxglove_launch(self, profile) -> Path:
        """
        Generate Foxglove bridge launch file

        Args:
            profile: RobotProfile with configuration

        Returns:
            Path to generated launch file
        """
        launch_content = self._generate_foxglove_launch_content(profile)

        launch_file = self.launch_dir / 'foxglove.launch.py'
        launch_file.write_text(launch_content)

        self.logger.info(f"Generated Foxglove launch file: {launch_file}")

        # Generate topic configuration
        self._generate_topic_config(profile)

        return launch_file

    def _generate_foxglove_launch_content(self, profile) -> str:
        """Generate Foxglove bridge launch file content"""

        port = 8765
        max_qos_depth = 10

        content = f'''#!/usr/bin/env python3
"""
Foxglove bridge launch file for {profile.name}
Enables web-based visualization and control
"""

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, LogInfo
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node


def generate_launch_description():
    """Generate Foxglove bridge launch description"""

    # Declare launch arguments
    port_arg = DeclareLaunchArgument(
        'foxglove_port',
        default_value='{port}',
        description='Foxglove bridge WebSocket port'
    )

    address_arg = DeclareLaunchArgument(
        'foxglove_address',
        default_value='0.0.0.0',
        description='Foxglove bridge bind address'
    )

    # Foxglove bridge node
    foxglove_bridge = Node(
        package='foxglove_bridge',
        executable='foxglove_bridge',
        name='foxglove_bridge',
        parameters=[{{
            'port': LaunchConfiguration('foxglove_port'),
            'address': LaunchConfiguration('foxglove_address'),
            'max_qos_depth': {max_qos_depth},
            'num_threads': 4,
            'send_buffer_limit': 10000000,
            'use_sim_time': False,
        }}],
        output='screen',
        respawn=True,
        respawn_delay=2.0
    )

    # Info message
    info_msg = LogInfo(
        msg=[
            'Foxglove bridge started on ws://',
            LaunchConfiguration('foxglove_address'),
            ':',
            LaunchConfiguration('foxglove_port')
        ]
    )

    return LaunchDescription([
        port_arg,
        address_arg,
        foxglove_bridge,
        info_msg
    ])
'''

        return content

    def _generate_topic_config(self, profile):
        """Generate Foxglove topic whitelist configuration"""

        # Build list of topics to publish
        topics = [
            '/tf',
            '/tf_static',
            '/robot_description',
        ]

        # Add sensor topics
        if any(hw for hw in profile.hardware if 'lidar' in hw):
            topics.extend([
                '/scan',
                '/cloud',
            ])

        if any(hw for hw in profile.hardware if 'camera' in hw):
            topics.extend([
                '/camera/image_raw',
                '/camera/camera_info',
                '/camera/depth/image_raw',
            ])

        if any(hw for hw in profile.hardware if 'imu' in hw):
            topics.append('/imu/data')

        if any(hw for hw in profile.hardware if 'gps' in hw):
            topics.append('/gps/fix')

        # Add navigation topics if enabled
        if profile.navigation:
            topics.extend([
                '/map',
                '/global_costmap/costmap',
                '/local_costmap/costmap',
                '/plan',
                '/local_plan',
                '/goal_pose',
                '/cmd_vel',
                '/odom',
            ])

        # Add diagnostics if enabled
        if profile.diagnostics:
            topics.extend([
                '/diagnostics',
                '/diagnostics_agg',
            ])

        # Generate YAML config
        config_content = f'''# Foxglove topic configuration for {profile.name}
# Generated by ROS2 Build Tool

# Topics to publish to Foxglove Studio
topics:
'''

        for topic in sorted(set(topics)):
            config_content += f'  - {topic}\n'

        config_content += '''
# WebSocket configuration
websocket:
  port: 8765
  address: "0.0.0.0"
  max_qos_depth: 10

# Performance settings
performance:
  num_threads: 4
  send_buffer_limit: 10000000
  max_update_rate_hz: 30

# Compression settings
compression:
  level: 1  # 0=none, 9=max
  threshold: 1024  # bytes
'''

        config_file = self.config_dir / 'foxglove_topics.yaml'
        config_file.write_text(config_content)

        self.logger.info(f"Generated Foxglove topic config: {config_file}")

    def generate_foxglove_layout(self, profile) -> Path:
        """
        Generate default Foxglove Studio layout JSON

        Args:
            profile: RobotProfile with configuration

        Returns:
            Path to generated layout file
        """
        import json

        # Build basic layout configuration
        layout = {
            "configById": {
                "3D!1": {
                    "layers": {
                        "grid": {"visible": True},
                        "tf": {"visible": True}
                    },
                    "cameraState": {
                        "perspective": True,
                        "distance": 10,
                        "phi": 45,
                        "thetaOffset": 45,
                        "targetOffset": [0, 0, 0],
                        "target": [0, 0, 0],
                        "targetOrientation": [0, 0, 0, 1]
                    },
                    "followTf": "base_link",
                    "followMode": "follow-position"
                }
            },
            "globalVariables": {},
            "userNodes": {},
            "playbackConfig": {"speed": 1},
            "layout": {
                "first": "3D!1",
                "second": {
                    "first": "RawMessages!1",
                    "second": "Diagnostics!1",
                    "direction": "column"
                },
                "direction": "row",
                "splitPercentage": 70
            }
        }

        layout_file = self.config_dir / 'foxglove_layout.json'
        layout_file.write_text(json.dumps(layout, indent=2))

        self.logger.info(f"Generated Foxglove layout: {layout_file}")

        return layout_file