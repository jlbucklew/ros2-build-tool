"""
Lifecycle-aware launch file generation with self-healing patterns
"""

import logging
from pathlib import Path
from typing import List, Dict, Optional
from ros2_build_tool_core.models import RobotProfile, HardwareComponent


class LifecycleAwareLaunchGenerator:
    """Generate launch files with lifecycle node management and self-healing"""

    def __init__(self, package_path: Path, logger: logging.Logger):
        self.package_path = package_path
        self.launch_dir = package_path / 'launch'
        self.launch_dir.mkdir(exist_ok=True)
        self.logger = logger

    def generate_main_launch(
        self,
        profile: RobotProfile,
        hardware_components: List[HardwareComponent]
    ) -> Path:
        """Generate main launch file with lifecycle orchestration"""

        use_lifecycle = profile.lifecycle_management
        use_composable = profile.composable_nodes

        launch_content = f'''#!/usr/bin/env python3
"""
Main launch file for {profile.name}
Generated by ROS2 Build Tool with {'lifecycle' if use_lifecycle else 'standard'} node management
"""

from launch import LaunchDescription
from launch.actions import (
    DeclareLaunchArgument,
    IncludeLaunchDescription,
    RegisterEventHandler,
    LogInfo,
    TimerAction
)
from launch.conditions import IfCondition, UnlessCondition
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node, LifecycleNode
from launch_ros.substitutions import FindPackageShare
from launch_ros.event_handlers import OnStateTransition
from launch_ros.events.lifecycle import ChangeState
from lifecycle_msgs.msg import Transition
import os


def generate_launch_description():
    """Generate launch description with all system components"""

    # Declare launch arguments
    use_sim_time_arg = DeclareLaunchArgument(
        'use_sim_time',
        default_value='false',
        description='Use simulation time'
    )

    rviz_arg = DeclareLaunchArgument(
        'rviz',
        default_value='{"true" if profile.rviz else "false"}',
        description='Launch RViz'
    )

    foxglove_arg = DeclareLaunchArgument(
        'foxglove',
        default_value='{"true" if profile.foxglove else "false"}',
        description='Launch Foxglove bridge'
    )

    # Get launch configurations
    use_sim_time = LaunchConfiguration('use_sim_time')
    launch_rviz = LaunchConfiguration('rviz')
    launch_foxglove = LaunchConfiguration('foxglove')

    # Package share directories
    pkg_share = FindPackageShare('{profile.name}_bringup')

    # Include sensor drivers launch
    sensors_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'sensors.launch.py'])
        ]),
        launch_arguments={{
            'use_sim_time': use_sim_time,
        }}.items()
    )

    # Robot state publisher (must start first)
    robot_description_path = PathJoinSubstitution([
        pkg_share, 'urdf', 'robot.urdf'
    ])

    with open(str(robot_description_path), 'r') as f:
        robot_description = f.read()

    robot_state_publisher = {'LifecycleNode' if use_lifecycle else 'Node'}(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        name='robot_state_publisher',
        output='screen',
        parameters=[{{
            'robot_description': robot_description,
            'use_sim_time': use_sim_time,
        }}],
'''

        if use_lifecycle:
            launch_content += '''        # Lifecycle configuration
        namespace='',
        respawn=False,  # Lifecycle nodes use lifecycle management instead
    )

    # Lifecycle event handlers for robot_state_publisher
    rsp_configure_event = RegisterEventHandler(
        OnStateTransition(
            target_lifecycle_node=robot_state_publisher,
            start_state='configuring',
            goal_state='inactive',
            entities=[
                LogInfo(msg='Robot state publisher configured, activating...'),
                ChangeState(
                    lifecycle_node_matcher=lambda node: node == robot_state_publisher,
                    transition_id=Transition.TRANSITION_ACTIVATE
                )
            ]
        )
    )

    rsp_activate_event = RegisterEventHandler(
        OnStateTransition(
            target_lifecycle_node=robot_state_publisher,
            start_state='activating',
            goal_state='active',
            entities=[
                LogInfo(msg='Robot state publisher active, starting sensors...'),
                TimerAction(
                    period=2.0,
                    actions=[sensors_launch]
                )
            ]
        )
    )

    # Trigger initial configuration
    configure_rsp = TimerAction(
        period=0.5,
        actions=[
            ChangeState(
                lifecycle_node_matcher=lambda node: node == robot_state_publisher,
                transition_id=Transition.TRANSITION_CONFIGURE
            )
        ]
    )
'''
        else:
            launch_content += '''        respawn=True,
        respawn_delay=2.0,
        respawn_max_count=5,
    )
'''

        # Add SLAM and navigation
        if profile.slam_type.value != 'none':
            launch_content += f'''
    # SLAM launch
    slam_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'slam.launch.py'])
        ]),
        launch_arguments={{
            'use_sim_time': use_sim_time,
            'slam_type': '{profile.slam_type.value}',
        }}.items()
    )
'''

        if profile.navigation:
            launch_content += '''
    # Navigation launch
    nav2_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'navigation.launch.py'])
        ]),
        launch_arguments={
            'use_sim_time': use_sim_time,
        }.items()
    )
'''

        # Add visualization
        if profile.rviz:
            launch_content += '''
    # RViz
    rviz_config = PathJoinSubstitution([pkg_share, 'rviz', 'robot.rviz'])
    rviz_node = Node(
        package='rviz2',
        executable='rviz2',
        name='rviz2',
        arguments=['-d', rviz_config],
        condition=IfCondition(launch_rviz),
        parameters=[{'use_sim_time': use_sim_time}]
    )
'''

        if profile.foxglove:
            launch_content += '''
    # Foxglove bridge
    foxglove_launch = IncludeLaunchDescription(
        PythonLaunchDescriptionSource([
            PathJoinSubstitution([pkg_share, 'launch', 'foxglove.launch.py'])
        ]),
        condition=IfCondition(launch_foxglove)
    )
'''

        # Add self-healing watchdog
        if profile.self_healing:
            launch_content += '''
    # Self-healing watchdog
    watchdog_node = Node(
        package='ros2_build_tool_watchdog',
        executable='topic_watchdog',
        name='topic_watchdog',
        output='screen',
        parameters=[{
            'monitored_topics': ['/scan', '/odom', '/imu'],
            'timeout_seconds': 5.0,
            'check_rate_hz': 1.0,
        }]
    )
'''

        # Build launch description
        launch_content += '''
    # Build launch description
    ld = LaunchDescription([
        # Arguments
        use_sim_time_arg,
        rviz_arg,
        foxglove_arg,

        # Core nodes
        robot_state_publisher,
'''

        if use_lifecycle:
            launch_content += '''        # Lifecycle event handlers
        rsp_configure_event,
        rsp_activate_event,
        configure_rsp,
'''
        else:
            launch_content += '''        # Sensors
        sensors_launch,
'''

        # Add optional components
        if profile.slam_type.value != 'none':
            launch_content += '''        slam_launch,
'''
        if profile.navigation:
            launch_content += '''        nav2_launch,
'''
        if profile.rviz:
            launch_content += '''        rviz_node,
'''
        if profile.foxglove:
            launch_content += '''        foxglove_launch,
'''
        if profile.self_healing:
            launch_content += '''        watchdog_node,
'''

        launch_content += '''    ])

    return ld
'''

        # Write launch file
        launch_file = self.launch_dir / 'robot.launch.py'
        with open(launch_file, 'w') as f:
            f.write(launch_content)

        launch_file.chmod(0o755)  # Make executable
        self.logger.info(f"Generated main launch file: {launch_file}")

        return launch_file

    def generate_sensors_launch(
        self,
        profile: RobotProfile,
        hardware_components: List[HardwareComponent]
    ) -> Path:
        """Generate sensors launch file with hardware drivers"""

        use_lifecycle = profile.lifecycle_management

        launch_content = '''#!/usr/bin/env python3
"""
Sensor drivers launch file
"""

from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration
from launch_ros.actions import Node, LifecycleNode
from launch_ros.substitutions import FindPackageShare


def generate_launch_description():
    """Launch all sensor drivers"""

    use_sim_time = LaunchConfiguration('use_sim_time', default='false')

    nodes = []

'''

        # Generate node for each hardware component
        for component in hardware_components:
            if not component.discovered_executable:
                continue

            package_name = component.package_name or component.name.lower().replace(' ', '_')
            node_name = f"{component.type}_{component.name.lower().replace(' ', '_')}"

            node_type = 'LifecycleNode' if use_lifecycle else 'Node'

            launch_content += f'''    # {component.name}
    {node_name} = {node_type}(
        package='{package_name}',
        executable='{component.discovered_executable}',
        name='{node_name}',
        output='screen',
        parameters=[{{'use_sim_time': use_sim_time}}],
        respawn={'False' if use_lifecycle else 'True'},
        {'respawn_delay=2.0,' if not use_lifecycle else ''}
        {'respawn_max_count=5,' if not use_lifecycle else ''}
    )
    nodes.append({node_name})

'''

        launch_content += '''    return LaunchDescription(nodes)
'''

        launch_file = self.launch_dir / 'sensors.launch.py'
        with open(launch_file, 'w') as f:
            f.write(launch_content)

        launch_file.chmod(0o755)
        self.logger.info(f"Generated sensors launch file: {launch_file}")

        return launch_file